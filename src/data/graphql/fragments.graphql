fragment TabooSet on taboo_set {
  id
  name
  code
  active
  date
  card_count
  current
}
fragment EncounterSet on card_encounter_set {
  code
  name
}
fragment Pack on pack {
  code
  cycle_code
  real_name
  position
  official
}
fragment Cycle on cycle {
  code
  real_name
  position
  official
}
fragment SingleCard on all_card {
  id
  code
  cost
  clues
  doom
  stage
  illustrator
  double_sided
  deck_limit
  encounter_code
  encounter_position
  exceptional
  exile
  faction_code
  health
  health_per_investigator
  is_unique
  myriad
  pack_code
  pack_position
  permanent
  position
  quantity
  real_flavor
  real_name
  real_pack_name
  real_slot
  real_subname
  real_text
  real_traits
  real_back_name
  real_back_text
  real_back_flavor
  real_encounter_set_name
  sanity
  skill_agility
  skill_combat
  skill_intellect
  skill_willpower
  skill_wild
  subtype_code
  type_code
  victory
  shroud
  back_link_id
  enemy_horror
  enemy_damage
  enemy_evade
  enemy_fight
  hidden
  deck_options
  deck_requirements
  restrictions
  imagesrc
  backimagesrc
  faction2_code
  faction3_code
  xp
  version
  alternate_required_code
  clues_fixed
  errata_date
  alternate_of_code
  duplicate_of_code
  spoiler
  vengeance
  customization_options
  taboo_set_id
  taboo_xp
  errata_date
  real_customization_text
  real_customization_change
  real_taboo_text_change
  preview
  official
  taboo_placeholder
  gender
  alt_art_investigator
  tags
}
fragment CoreCardText on all_card_text {
  flavor
  name
  slot
  subname
  text
  traits
  back_flavor
  back_text
  back_name
  customization_change
  customization_text
  taboo_text_change
}
fragment UserInfo on users {
  id
  handle
}

fragment GuideInput on guide_input {
  id
  campaign_id
  step
  scenario
  type
  payload
}

fragment GuideAchievement on guide_achievement {
  id
  campaign_id
  type
  value
  bool_value
}

fragment IdDeck on campaign_deck {
  id
  owner_id
  arkhamdb_id
  local_uuid
  campaign_id
}

fragment FullChaosBagResult on chaos_bag_result {
  id
  bless
  curse
  drawn
  sealed
  totalDrawn
  tarot
  difficulty
}

fragment MiniDeck on campaign_deck {
  ...IdDeck
  investigator
}

fragment BasicDeck on campaign_deck {
  ...MiniDeck
  arkhamdb_user
  content
  content_hash
}

fragment AllDeck on campaign_deck {
  ...BasicDeck
  campaign {
    id
    uuid
  }
  next_deck {
    ...IdDeck
  }
  previous_deck {
    ...IdDeck
  }
}

fragment HistoryDeck on campaign_deck {
  ...BasicDeck
  owner {
    ...UserInfo
  }
  next_deck {
    ...IdDeck
  }
  previous_deck {
    ...IdDeck
  }
}

fragment LatestDeck on campaign_deck {
  ...BasicDeck
  owner {
    ...UserInfo
  }
  campaign {
    id
    uuid
    name
  }
  investigator_data {
    id
    killed
    insane
    physical
    mental
  }
  previous_deck {
    ...BasicDeck
  }
}

fragment MiniInvestigatorData on investigator_data {
  id
  campaign_id
  investigator
  mental
  physical
  insane
  killed
  storyAssets
}


fragment FullGuideInvestigatorData on investigator_data {
  ...MiniInvestigatorData

  addedCards
  ignoreStoryAssets
  removedCards
  cardCounts

  specialXp
  availableXp
}

fragment FullInvestigatorData on investigator_data {
  ...FullGuideInvestigatorData
  spentXp
}

fragment MiniCampaign on campaign {
  id
  uuid
  name
  cycleCode
  standaloneId
  difficulty
  scenarioResults
  guided
  archived
  owner_id
  latest_decks(order_by: { owner_id: asc }) {
    deck {
      ...MiniDeck
    }
  }
  investigators(order_by: { created_at: asc }) {
    id
    investigator
  }
  investigator_data(order_by: { created_at: asc}) {
    ...MiniInvestigatorData
  }
  updated_at
}

fragment FullCampaign on campaign {
  id
  updated_at
  uuid
  name
  deleted
  cycleCode
  standaloneId
  difficulty
  campaignNotes
  chaosBag
  showInterludes
  scenarioResults
  weaknessSet
  guided
  guide_version
  tarot_reading
  archived
  owner_id
  investigators(order_by: { created_at: asc }) {
    id
    investigator
  }
  investigator_data(order_by: { created_at: asc}) {
    ...FullInvestigatorData
  }
  latest_decks(order_by: { owner_id: asc }) {
    deck {
      ...LatestDeck
    }
  }
  link_a_campaign {
    id
    uuid
  }
  link_b_campaign {
    id
    uuid
  }
  linked_campaign {
    id
    uuid
  }
}

fragment FullCampaignGuideState on campaign_guide {
  id
  uuid
  updated_at
  guide_inputs(order_by: [
    { created_at: asc },
    { inserted_idx: asc }
  ]) {
    ...GuideInput
  }
  guide_achievements(order_by: { created_at: asc }) {
    ...GuideAchievement
  }
}
