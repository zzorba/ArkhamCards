mutation deleteInvestigatorDecks(
  $campaign_id: Int!,
  $investigator: String!,
  $user_id: String!,
) {
  delete_campaign_deck(
    where: {
      campaign_id: { _eq: $campaign_id }
      investigator: { _eq: $investigator }
      owner_id: { _eq: $user_id }
    }
  ) {
    returning {
      id
      campaign_id
      arkhamdb_id
      local_uuid
      investigator
      owner_id
    }
  }
}

mutation setBinaryAchievement(
  $campaign_id: Int!,
  $id: String!,
  $value: Boolean!
) {
  insert_guide_achievement_one(
    object: {
      campaign_id: $campaign_id
      id: $id
      type: "binary"
      bool_value: $value
    }
    on_conflict: {
      constraint: guide_achievement_pkey
      update_columns: [bool_value]
    }
  ) {
    ...GuideAchievement
  }
}

mutation setCountAchievement(
  $campaign_id: Int!,
  $id: String!,
  $value: Int!
) {
  insert_guide_achievement_one(
    object: {
      campaign_id: $campaign_id
      id: $id
      type: "count"
      value: $value
    }
    on_conflict: {
      constraint: guide_achievement_pkey
      update_columns: [value]
    }
  ) {
    ...GuideAchievement
  }
}

mutation addGuideInput(
  $id: String!,
  $campaign_id: Int!,
  $type: String!,
  $scenario: String,
  $step: String,
  $payload: jsonb
) {
  insert_guide_input_one(
    object: {
      id: $id
      campaign_id: $campaign_id
      scenario: $scenario
      step: $step
      type: $type
      payload: $payload
    }
    on_conflict: {
      constraint: guide_input_pkey
      update_columns: [payload]
    }
  ) {
    ...GuideInput
  }
}

mutation removeGuideInputs(
  $campaign_id: Int!,
  $ids: [String!]!,
) {
  delete_guide_input(
    where:{
      campaign_id: { _eq: $campaign_id }
      id: { _in: $ids }
    }
  ) {
    affected_rows
    returning {
      id
      campaign_id
    }
  }
}

mutation updateInvestigatorTrauma(
  $campaign_id: Int!,
  $investigator: String!,
  $physical: Int,
  $mental: Int,
  $killed: Boolean,
  $insane: Boolean,
) {
  insert_investigator_data_one(
    object: {
      campaign_id: $campaign_id
      investigator: $investigator
      physical: $physical
      mental: $mental
      killed: $killed
      insane: $insane
    }
    on_conflict: {
      constraint: investigator_data_pkey
      update_columns: [physical, mental, killed, insane]
    }
  ) {
    ...MiniInvestigatorData
  }
}


mutation updateInvestigatorData(
  $campaign_id: Int!,
  $investigator: String!,
  $physical: Int,
  $mental: Int,
  $killed: Boolean,
  $insane: Boolean,
  $addedCards: jsonb,
  $availableXp: Int,
  $specialXp: jsonb,
  $storyAssets: jsonb,
  $ignoreStoryAssets: jsonb,
  $removedCards: jsonb,
  $cardCounts: jsonb
) {
  insert_investigator_data_one(
    object: {
      campaign_id: $campaign_id
      investigator: $investigator
      physical: $physical
      mental: $mental
      killed: $killed
      insane: $insane
      cardCounts: $cardCounts
      addedCards: $addedCards
      storyAssets: $storyAssets
      ignoreStoryAssets: $ignoreStoryAssets
      removedCards: $removedCards
      specialXp: $specialXp
      availableXp: $availableXp
    }
    on_conflict: {
      constraint: investigator_data_pkey
      update_columns: [
        physical, mental, killed, insane,
        addedCards, removedCards, storyAssets, ignoreStoryAssets, cardCounts,
	      availableXp, specialXp
      ]
    }
  ) {
    ...FullGuideInvestigatorData
  }
}

mutation updateSpentXp(
  $campaign_id: Int!,
  $investigator: String!,
  $spent_xp: Int!
) {
  insert_investigator_data_one(
    object: {
      campaign_id: $campaign_id
      investigator: $investigator
      spentXp: $spent_xp
    }
    on_conflict: {
      constraint: investigator_data_pkey
      update_columns: [spentXp]
    }
  ) {
    id
    campaign_id
    investigator
    spentXp
  }
}


mutation updateAvailableXp(
  $campaign_id: Int!,
  $investigator: String!,
  $available_xp: Int!
) {
  insert_investigator_data_one(
    object: {
      campaign_id: $campaign_id
      investigator: $investigator
      availableXp: $available_xp
    }
    on_conflict: {
      constraint: investigator_data_pkey
      update_columns: [availableXp]
    }
  ) {
    id
    campaign_id
    investigator
    availableXp
  }
}


mutation updateCampaignArchived(
  $campaign_id: Int!,
  $archived: Boolean!
) {

  update_campaign_by_pk(
    pk_columns: { id: $campaign_id }
    _set: {
      archived: $archived,
    },
  ) {
    id
    uuid
    archived
  }
}

mutation updateWeaknessSet(
  $campaign_id: Int!,
  $weakness_set: jsonb!
) {
  update_campaign_by_pk(
    pk_columns: { id: $campaign_id }
    _set: {
      weaknessSet: $weakness_set,
    },
  ) {
    id
    uuid
    weaknessSet
  }
}

mutation updateCampaignDifficulty(
  $campaign_id: Int!,
  $difficulty: String
) {
  update_campaign_by_pk(
    pk_columns: { id: $campaign_id }
    _set: {
      difficulty: $difficulty,
    },
  ) {
    id
    uuid
    difficulty
  }
}

mutation updateCampaignScenarioResults(
  $campaign_id: Int!,
  $scenarioResults: jsonb!
) {
  update_campaign_by_pk(
    pk_columns: { id: $campaign_id }
    _set: {
      scenarioResults: $scenarioResults,
    },
  ) {
    id
    uuid
    scenarioResults
  }
}

mutation updateCampaignGuideVersion(
  $campaign_id: Int!,
  $guideVersion: Int!
) {
  update_campaign_by_pk(
    pk_columns: { id: $campaign_id }
    _set: {
      guide_version: $guideVersion,
    },
  ) {
    id
    uuid
    guide_version
  }
}

mutation updateCampaignNotes(
  $campaign_id: Int!,
  $campaign_notes: jsonb!
) {
  update_campaign_by_pk(
    pk_columns: { id: $campaign_id }
    _set: {
      campaignNotes: $campaign_notes,
    },
  ) {
    id
    uuid
    campaignNotes
  }
}

mutation updateCampaignShowInterludes(
  $campaign_id: Int!,
  $show_interludes: Boolean!
) {
  update_campaign_by_pk(
    pk_columns: { id: $campaign_id }
    _set: {
      showInterludes: $show_interludes,
    },
  ) {
    id
    uuid
    showInterludes
  }
}


mutation updateChaosBag(
  $campaign_id: Int!,
  $chaos_bag: jsonb!
) {
  update_campaign_by_pk(
    pk_columns: { id: $campaign_id }
    _set: {
      chaosBag: $chaos_bag,
    },
  ) {
    id
    uuid
    chaosBag
  }
}

mutation updateCampaignName(
  $campaign_id: Int!,
  $name: String!
) {
  update_campaign_by_pk(
    pk_columns: { id: $campaign_id }
    _set: {
      name: $name
    }
  ) {
    id
    uuid
    name
  }
}

mutation addCampaignInvestigator(
  $campaign_id: Int!,
  $investigator: String!
) {
  insert_campaign_investigator_one(
    object: {
      campaign_id: $campaign_id
      investigator: $investigator
    }
    on_conflict: {
      constraint: campaign_investigator_campaign_id_investigator_key
      update_columns: [investigator]
    }
  ) {
    id
    investigator
    campaign_id
  }
}

mutation removeCampaignInvestigator(
  $campaign_id: Int!,
  $investigator: String!
) {
  delete_campaign_investigator(
    where: {
      campaign_id: { _eq: $campaign_id }
      investigator: {_eq: $investigator }
    }
  ) {
    returning {
      id
      campaign_id
      investigator
    }
  }
}
