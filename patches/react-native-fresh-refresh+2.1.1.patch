diff --git a/node_modules/react-native-fresh-refresh/lib/index.js b/node_modules/react-native-fresh-refresh/lib/index.js
index 57148ff..9d42d6c 100644
--- a/node_modules/react-native-fresh-refresh/lib/index.js
+++ b/node_modules/react-native-fresh-refresh/lib/index.js
@@ -3,7 +3,7 @@ import { StyleSheet, View } from 'react-native';
 import { Gesture, GestureDetector } from 'react-native-gesture-handler';
 import DefaultLoader from './loader';
 import Animated, { Extrapolate, interpolate, runOnJS, useAnimatedScrollHandler, useAnimatedStyle, useDerivedValue, useSharedValue, withSpring, withTiming, } from 'react-native-reanimated';
-const RefreshableWrapper = ({ isLoading, onRefresh, refreshHeight = 100, defaultAnimationEnabled, contentOffset, children, Loader = <DefaultLoader />, bounces = true, hitSlop, managedLoading = false, }) => {
+const RefreshableWrapper = ({ isLoading, onRefresh, refreshHeight = 100, defaultAnimationEnabled, contentOffset, children, Loader = <DefaultLoader />, bounces = true, hitSlop, managedLoading = false }) => {
     const isRefreshing = useSharedValue(false);
     const loaderOffsetY = useSharedValue(0);
     const listContentOffsetY = useSharedValue(0);
@@ -22,14 +22,14 @@ const RefreshableWrapper = ({ isLoading, onRefresh, refreshHeight = 100, default
             isLoaderActive.value = true;
         }
     }, [isLoading]);
-    const onScroll = useAnimatedScrollHandler((event) => {
+    const onScroll = useAnimatedScrollHandler((event, ctx) => {
         const y = event.contentOffset.y;
         listContentOffsetY.value = y;
         // recover children component onScroll event
         if (children.props.onScroll) {
-            runOnJS(children.props.onScroll)(event);
+            runOnJS(children.props.onScroll)({ nativeEvent: event });
         }
-    });
+    }, [children.props.onScroll]);
     const native = Gesture.Native();
     const panGesture = Gesture.Pan()
         .onChange((event) => {
@@ -76,7 +76,11 @@ const RefreshableWrapper = ({ isLoading, onRefresh, refreshHeight = 100, default
                         scale: isLoaderActive.value ? withSpring(1) : withTiming(0.01),
                     },
                 ]
-                : undefined,
+                : [
+                    {
+                        translateY: interpolate(loaderOffsetY.value, [0, refreshHeight], [-refreshHeight, 0], Extrapolate.CLAMP)
+                    },
+                ],
         };
     });
     const overscrollAnimation = useAnimatedStyle(() => {
