diff --git a/node_modules/react-native-action-button/ActionButton.js b/node_modules/react-native-action-button/ActionButton.js
index ec1b9e3..9fec9ba 100644
--- a/node_modules/react-native-action-button/ActionButton.js
+++ b/node_modules/react-native-action-button/ActionButton.js
@@ -35,13 +35,13 @@ const ActionButton = props => {
 
   useEffect(() => {
     if (props.active) {
-      Animated.spring(anim.current, { toValue: 1 }).start();
+      Animated.spring(anim.current, { toValue: 1, useNativeDriver: false }).start();
       setActive(true);
       setResetToken(props.resetToken);
     } else {
       props.onReset && props.onReset();
 
-      Animated.spring(anim.current, { toValue: 0 }).start();
+      Animated.spring(anim.current, { toValue: 0, useNativeDriver: false }).start();
       timeout.current = setTimeout(() => {
         setActive(false);
         setResetToken(props.resetToken);
@@ -254,7 +254,7 @@ const ActionButton = props => {
     if (active) return reset(animate);
 
     if (animate) {
-      Animated.spring(anim.current, { toValue: 1 }).start();
+      Animated.spring(anim.current, { toValue: 1, useNativeDriver: false }).start();
     } else {
       anim.current.setValue(1);
     }
@@ -266,7 +266,7 @@ const ActionButton = props => {
     if (props.onReset) props.onReset();
 
     if (animate) {
-      Animated.spring(anim.current, { toValue: 0 }).start();
+      Animated.spring(anim.current, { toValue: 0, useNativeDriver: false }).start();
     } else {
       anim.current.setValue(0);
     }
@@ -315,52 +315,6 @@ const ActionButton = props => {
 
 ActionButton.Item = ActionButtonItem;
 
-ActionButton.propTypes = {
-  resetToken: PropTypes.any,
-  active: PropTypes.bool,
-
-  position: PropTypes.string,
-  elevation: PropTypes.number,
-  zIndex: PropTypes.number,
-
-  hideShadow: PropTypes.bool,
-  shadowStyle: PropTypes.oneOfType([
-    PropTypes.object,
-    PropTypes.array,
-    PropTypes.number
-  ]),
-
-  renderIcon: PropTypes.func,
-
-  bgColor: PropTypes.string,
-  bgOpacity: PropTypes.number,
-  buttonColor: PropTypes.string,
-  buttonTextStyle: Text.propTypes.style,
-  buttonText: PropTypes.string,
-
-  offsetX: PropTypes.number,
-  offsetY: PropTypes.number,
-  spacing: PropTypes.number,
-  size: PropTypes.number,
-  autoInactive: PropTypes.bool,
-  onPress: PropTypes.func,
-  onPressIn: PropTypes.func,
-  onPressOut: PropTypes.func,
-  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
-  degrees: PropTypes.number,
-  verticalOrientation: PropTypes.oneOf(["up", "down"]),
-  backgroundTappable: PropTypes.bool,
-  activeOpacity: PropTypes.number,
-
-  useNativeFeedback: PropTypes.bool,
-  fixNativeFeedbackRadius: PropTypes.bool,
-  nativeFeedbackRippleColor: PropTypes.string,
-
-  testID: PropTypes.string,
-  accessibilityLabel: PropTypes.string,
-  accessible: PropTypes.bool
-};
-
 ActionButton.defaultProps = {
   resetToken: null,
   active: false,
